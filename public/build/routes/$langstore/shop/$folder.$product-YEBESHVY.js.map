{
  "version": 3,
  "sources": ["../../../../../src/routes/$langstore/shop/$folder.$product.tsx"],
  "sourcesContent": ["import { HttpCacheHeaderTaggerFromLoader, StoreFrontAwaretHttpCacheHeaderTagger } from '~/use-cases/http/cache';\nimport { HeadersFunction, json, LoaderFunction, MetaFunction } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { getStoreFront } from '~/core/storefront.server';\nimport { buildMetas } from '~/use-cases/MicrodataBuilder';\nimport { getContext } from '~/use-cases/http/utils';\nimport Product from '~/ui/pages/Product';\nimport dataFetcherForShapePage from '~/core/dataFetcherForShapePage.server';\n\nexport const headers: HeadersFunction = ({ loaderHeaders }) => {\n    return HttpCacheHeaderTaggerFromLoader(loaderHeaders).headers;\n};\n\nexport let meta: MetaFunction = ({ data }) => {\n    return buildMetas(data.data);\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n    const requestContext = getContext(request);\n    const path = `/shop/${params.folder}/${params.product}`;\n    const { shared } = await getStoreFront(requestContext.host);\n    const data = await dataFetcherForShapePage('product', path, requestContext, params);\n    return json({ data }, StoreFrontAwaretHttpCacheHeaderTagger('15s', '1w', [path], shared.config.tenantIdentifier));\n};\n\nexport default () => {\n    const { data } = useLoaderData();\n    return <Product data={data} />;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,wBAA8B;AAI9B,qCAAoC;AAoBzB;AAdJ,IAAI,OAAqB,CAAC,EAAE,KAAK,MAAM;AAC1C,SAAO,WAAW,KAAK,IAAI;AAC/B;AAUA,IAAO,yBAAQ,MAAM;AACjB,QAAM,EAAE,KAAK,IAAI,cAAc;AAC/B,SAAO,mDAAC,mBAAQ,QAAT;AAAA;AAAA;AAAA;AAAA,SAAqB;AAChC;",
  "names": []
}
