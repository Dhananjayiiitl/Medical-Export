{
  "version": 3,
  "sources": ["../../../../src/routes/$langstore/$.tsx"],
  "sourcesContent": ["import { HeadersFunction, json, LoaderFunction, MetaFunction, Response } from '@remix-run/node';\nimport { HttpCacheHeaderTaggerFromLoader, StoreFrontAwaretHttpCacheHeaderTagger } from '~/use-cases/http/cache';\nimport { getContext } from '~/use-cases/http/utils';\nimport { getStoreFront } from '~/core/storefront.server';\nimport { CrystallizeAPI } from '~/use-cases/crystallize/read';\nimport { useLoaderData } from '@remix-run/react';\nimport { buildMetas } from '~/use-cases/MicrodataBuilder';\nimport Product from '~/ui/pages/Product';\nimport Category from '~/ui/pages/Category';\nimport AbstractStory from '~/ui/pages/AbstractStory';\nimport Topic from '~/ui/pages/Topic';\nimport LandingPage from '~/ui/pages/LandingPage';\nimport dataFetcherForShapePage from '~/core/dataFetcherForShapePage.server';\n\nexport const headers: HeadersFunction = ({ loaderHeaders }) => {\n    return HttpCacheHeaderTaggerFromLoader(loaderHeaders).headers;\n};\n\nexport let meta: MetaFunction = ({ data }) => {\n    return buildMetas(data);\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n    const requestContext = getContext(request);\n    const { shared, secret } = await getStoreFront(requestContext.host);\n    const path = '/' + params['*'];\n    const crystallizePath = path.replace('.pdf', '');\n    const api = CrystallizeAPI({\n        apiClient: secret.apiClient,\n        language: requestContext.language,\n        isPreview: requestContext.isPreview,\n    });\n    const map = await api.fetchTreeMap();\n    const mappedKey = Object.keys(map).find((key: string) => key === crystallizePath);\n    if (!mappedKey) {\n        throw new Response('Not Found', {\n            status: 404,\n        });\n    }\n\n    const shapeIdentifier = map[mappedKey as keyof typeof map]?.shape?.identifier || '_topic';\n    const data = await dataFetcherForShapePage(shapeIdentifier, path, requestContext, params);\n\n    return json(\n        { shapeIdentifier, data },\n        StoreFrontAwaretHttpCacheHeaderTagger('15s', '1w', [path], shared.config.tenantIdentifier),\n    );\n};\n\nexport default () => {\n    const { data, shapeIdentifier } = useLoaderData();\n      console.log(data)\n  \n    return <h1>deep</h1>\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAGA,wBAA8B;AAS9B,qCAAoC;AAyCzB;AAnCJ,IAAI,OAAqB,CAAC,EAAE,KAAK,MAAM;AAC1C,SAAO,WAAW,IAAI;AAC1B;AA6BA,IAAO,YAAQ,MAAM;AACjB,QAAM,EAAE,MAAM,gBAAgB,IAAI,cAAc;AAC9C,UAAQ,IAAI,IAAI;AAElB,SAAO,mDAAC,QAAG,oBAAJ;AAAA;AAAA;AAAA;AAAA,SAAQ;AACnB;",
  "names": []
}
