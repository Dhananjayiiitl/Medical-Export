{
  "version": 3,
  "sources": ["../../../../src/routes/$langstore/index.tsx", "../../../../src/ui/pages/LandingPage.tsx"],
  "sourcesContent": ["import { HeadersFunction, json, LinksFunction, LoaderFunction, MetaFunction } from '@remix-run/node';\nimport { HttpCacheHeaderTaggerFromLoader, StoreFrontAwaretHttpCacheHeaderTagger } from '~/use-cases/http/cache';\nimport splideStyles from '@splidejs/splide/dist/css/themes/splide-default.min.css';\nimport { useLoaderData } from '@remix-run/react';\nimport { getStoreFront } from '~/core/storefront.server';\nimport { buildMetas } from '~/use-cases/MicrodataBuilder';\nimport { getContext } from '~/use-cases/http/utils';\nimport videoStyles from '@crystallize/reactjs-components/assets/video/styles.css';\nimport LandingPage from '~/ui/pages/LandingPage';\nimport dataFetcherForShapePage from '~/core/dataFetcherForShapePage.server';\n\nexport let meta: MetaFunction = ({ data }) => {\n    return buildMetas(data.data);\n};\n\nexport const headers: HeadersFunction = ({ parentHeaders, loaderHeaders }) => {\n    return {\n        ...HttpCacheHeaderTaggerFromLoader(loaderHeaders).headers,\n        Link: parentHeaders.get('Link') as string,\n    };\n};\n\nexport const links: LinksFunction = () => {\n    return [\n        { rel: 'stylesheet', href: splideStyles },\n        { rel: 'stylesheet', href: videoStyles },\n    ];\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n    const requestContext = getContext(request);\n    const path = `/frontpage`;\n    const { shared } = await getStoreFront(requestContext.host);\n    const data = await dataFetcherForShapePage('landing-page', path, requestContext, params);\n    return json({ data }, StoreFrontAwaretHttpCacheHeaderTagger('15s', '1w', [path], shared.config.tenantIdentifier));\n};\n\nexport default () => {\n    const { data } = useLoaderData();\n    return <LandingPage data={data} />;\n};\n", "import { Grid } from '../components/grid/grid';\nimport { LandingPage } from '~/use-cases/contracts/LandingPage';\n\n\nexport default ({ data: landing }: { data: LandingPage }) => {\n    \n\n    return (\n        <div className=\"min-h-[100vh]\">\n            {landing?.grids?.map((grid, index) => (\n                <div key={`${grid.id}-${index}`} className=\"mx-auto w-full test\">\n                    <Grid grid={grid} />\n                </div>\n            ))}\n            fuck yaar\n           \n        </div>\n    );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,wBAA8B;;;ACOV;AAPpB,IAAO,sBAAQ,CAAC,EAAE,MAAM,QAAQ,MAA6B;AAJ7D;AAOI,SACI,mDAAC,SAAI,WAAU,iBACV;AAAA,6CAAS,UAAT,mBAAgB,IAAI,CAAC,MAAM,UACxB,mDAAC,SAAgC,WAAU,uBACvC,6DAAC,QAAK,QAAN;AAAA;AAAA;AAAA;AAAA,WAAkB,KADZ,GAAG,KAAK,MAAM,SAAxB;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACD;AAAA,OALP;AAAA;AAAA;AAAA;AAAA,SAQA;AAER;;;ADTA,qCAAoC;AA8BzB,IAAAA,0BAAA;AA5BJ,IAAI,OAAqB,CAAC,EAAE,KAAK,MAAM;AAC1C,SAAO,WAAW,KAAK,IAAI;AAC/B;AASO,IAAM,QAAuB,MAAM;AACtC,SAAO;AAAA,IACH,EAAE,KAAK,cAAc,MAAM,2BAAa;AAAA,IACxC,EAAE,KAAK,cAAc,MAAM,eAAY;AAAA,EAC3C;AACJ;AAUA,IAAO,oBAAQ,MAAM;AACjB,QAAM,EAAE,KAAK,IAAI,cAAc;AAC/B,SAAO,oDAAC,uBAAY,QAAb;AAAA;AAAA;AAAA;AAAA,SAAyB;AACpC;",
  "names": ["import_jsx_dev_runtime"]
}
