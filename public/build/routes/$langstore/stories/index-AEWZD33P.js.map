{
  "version": 3,
  "sources": ["../../../../../src/routes/$langstore/stories/index.tsx", "../../../../../src/ui/pages/Stories.tsx"],
  "sourcesContent": ["import { HeadersFunction, json, LoaderFunction, MetaFunction } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { HttpCacheHeaderTaggerFromLoader, StoreFrontAwaretHttpCacheHeaderTagger } from '~/use-cases/http/cache';\nimport { getStoreFront } from '~/core/storefront.server';\nimport { CrystallizeAPI } from '~/use-cases/crystallize/read';\nimport { buildMetas } from '~/use-cases/MicrodataBuilder';\nimport { getContext } from '~/use-cases/http/utils';\nimport { CategoryWithChildren } from '~/use-cases/contracts/Category';\nimport Stories from '~/ui/pages/Stories';\n\nexport const headers: HeadersFunction = ({ loaderHeaders }) => {\n    return HttpCacheHeaderTaggerFromLoader(loaderHeaders).headers;\n};\n\nexport let meta: MetaFunction = ({ data }) => {\n    return buildMetas(data);\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n    const requestContext = getContext(request);\n    const path = `/stories`;\n    const { shared, secret } = await getStoreFront(requestContext.host);\n    const api = CrystallizeAPI({\n        apiClient: secret.apiClient,\n        language: requestContext.language,\n        isPreview: requestContext.isPreview,\n    });\n    const folder = await api.fetchFolderWithChildren(path);\n    return json({ folder }, StoreFrontAwaretHttpCacheHeaderTagger('15s', '1w', [path], shared.config.tenantIdentifier));\n};\n\nexport default () => {\n    const { folder } = useLoaderData() as { folder: CategoryWithChildren };\n    console.log(folder)\n    return <Stories folder={folder}/>;\n};\n", "import { Document } from '../components/item/document';\nimport { CategoryWithChildren } from '~/use-cases/contracts/Category';\nimport { Product } from '../components/item/product';\n\nexport default ({ folder }: { CategoryWithChildren }) => {\n     \n    return (\n        <div className=\"container 2xl md:px-6 mx-auto w-full p-10\">\n            {/* <h1 className=\"text-6xl font-bold mt-10 mb-4\">{folder.title}</h1>\n            <div className=\"flex gap-5\">{folder.description}</div>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-3 mt-10 grid-flow-row flex flex-wrap\">\n                {folder.children.map((child) => {\n                    // kind of a hack here as know that ProductSlim does not have a type\n                    if ('type' in child) {\n                        return <Document item={child} key={child.name} />;\n                    }\n                    return <Product item={child} key={child.name} />;\n                })}\n            </div> */}\n            hello\n\n        </div>\n    );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;AAGA,wBAA8B;;;ACItB;AAHR,IAAO,kBAAQ,CAAC,EAAE,OAAO,MAAgC;AAErD,SACI,mDAAC,SAAI,WAAU,6CAWD,qBAXd;AAAA;AAAA;AAAA;AAAA,SAcA;AAER;;;ADWW,IAAAA,0BAAA;AApBJ,IAAI,OAAqB,CAAC,EAAE,KAAK,MAAM;AAC1C,SAAO,WAAW,IAAI;AAC1B;AAeA,IAAO,kBAAQ,MAAM;AACjB,QAAM,EAAE,OAAO,IAAI,cAAc;AACjC,UAAQ,IAAI,MAAM;AAClB,SAAO,oDAAC,mBAAQ,UAAT;AAAA;AAAA;AAAA;AAAA,SAAwB;AACnC;",
  "names": ["import_jsx_dev_runtime"]
}
