{
  "version": 3,
  "sources": ["../../../../../src/routes/$langstore/stories/index.tsx"],
  "sourcesContent": ["import { HeadersFunction, json, LoaderFunction, MetaFunction } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { HttpCacheHeaderTaggerFromLoader, StoreFrontAwaretHttpCacheHeaderTagger } from '~/use-cases/http/cache';\nimport { getStoreFront } from '~/core/storefront.server';\nimport { CrystallizeAPI } from '~/use-cases/crystallize/read';\nimport { buildMetas } from '~/use-cases/MicrodataBuilder';\nimport { getContext } from '~/use-cases/http/utils';\nimport { CategoryWithChildren } from '~/use-cases/contracts/Category';\nimport Stories from '~/ui/pages/Stories';\n\nexport const headers: HeadersFunction = ({ loaderHeaders }) => {\n    return HttpCacheHeaderTaggerFromLoader(loaderHeaders).headers;\n};\n\nexport let meta: MetaFunction = ({ data }) => {\n    return buildMetas(data);\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n    const requestContext = getContext(request);\n    const path = `/stories`;\n    const { shared, secret } = await getStoreFront(requestContext.host);\n    console.log(shared,secret);\n    const api = CrystallizeAPI({\n        apiClient: secret.apiClient,\n        language: requestContext.language,\n        isPreview: requestContext.isPreview,\n    });\n    const folder = await api.fetchFolderWithChildren(path);\n    return json({ folder }, StoreFrontAwaretHttpCacheHeaderTagger('15s', '1w', [path], shared.config.tenantIdentifier));\n};\n\nexport default () => {\n    const { folder } = useLoaderData() as { folder: CategoryWithChildren };\n    console.log(folder)\n    return <div>fuck</div>;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;AAGA,wBAA8B;AAgCnB;AArBJ,IAAI,OAAqB,CAAC,EAAE,KAAK,MAAM;AAC1C,SAAO,WAAW,IAAI;AAC1B;AAgBA,IAAO,kBAAQ,MAAM;AACjB,QAAM,EAAE,OAAO,IAAI,cAAc;AACjC,UAAQ,IAAI,MAAM;AAClB,SAAO,mDAAC,SAAI,oBAAL;AAAA;AAAA;AAAA;AAAA,SAAS;AACpB;",
  "names": []
}
