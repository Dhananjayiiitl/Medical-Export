{
  "version": 3,
  "sources": ["empty-module:~/core/authentication.server", "../../../src/ui/hooks/useAuth.ts", "../../../node_modules/jwt-decode/lib/atob.js", "../../../node_modules/jwt-decode/lib/base64_url_decode.js", "../../../node_modules/jwt-decode/lib/index.js", "../../../src/ui/components/checkout-forms/magicklogin.tsx"],
  "sourcesContent": ["module.exports = {};", "import { useLocalStorage, writeStorage } from '@rehooks/local-storage';\nimport jwtDecode, { JwtPayload } from 'jwt-decode';\nimport { useEffect } from 'react';\nimport useLocation from '../bridge/useLocation';\nimport useSearchParams from '../bridge/useSearchParams';\n\nexport function useAuth() {\n    const [token] = useLocalStorage<string>('jwt', '');\n    const [searchParams] = useSearchParams();\n    const location = useLocation();\n\n    useEffect(() => {\n        // Note that we are on the frontend here, and this token is just here to hold some non sensitive data.\n        // Service API has a Cookie (http only and Safe only) that is used to hold a really token.\n        if (searchParams.has('token')) {\n            const urlToken = searchParams.get('token') as string;\n            searchParams.delete('token');\n            try {\n                const decoded = jwtDecode<JwtPayload>(urlToken);\n                if (decoded) {\n                    if (decoded.sub === 'isSupposedToBeLoggedInOnServiceApi') {\n                        writeStorage('jwt', urlToken);\n                    }\n                }\n            } catch (exception) {\n                console.log(exception);\n            }\n            // force reload here as we're playing with cookies.\n            window.location.href = location.pathname;\n        }\n    });\n\n    let userInfos: any = {};\n    let isAuthenticated = false;\n    try {\n        const decoded = jwtDecode<any>(token);\n        if (decoded && decoded.exp > Date.now() / 1000) {\n            isAuthenticated = true;\n            userInfos = {\n                email: decoded.email,\n                firstname: decoded.firstname,\n                lastname: decoded.lastname,\n            };\n        }\n    } catch (exception) {}\n    return {\n        login: (jwt: string) => {\n            writeStorage('jwt', jwt);\n        },\n        logout: () => {\n            writeStorage('jwt', '');\n        },\n        isAuthenticated,\n        userInfos,\n    };\n}\n", "/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;", "import atob from \"./atob\";\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(\n        atob(str).replace(/(.)/g, function(m, p) {\n            var code = p.charCodeAt(0).toString(16).toUpperCase();\n            if (code.length < 2) {\n                code = \"0\" + code;\n            }\n            return \"%\" + code;\n        })\n    );\n}\n\nexport default function(str) {\n    var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n\n    try {\n        return b64DecodeUnicode(output);\n    } catch (err) {\n        return atob(output);\n    }\n}", "\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}", "import { ChangeEvent, FormEvent, useState } from 'react';\nimport { useAppContext } from '../../app-context/provider';\nimport { useAuth } from '../../hooks/useAuth';\nimport { ServiceAPI } from '~/use-cases/service-api';\nimport { Input } from '../input';\n\nexport const MagickLoginForm: React.FC<{\n    enabledGuest?: Function;\n    title: string;\n    actionTitle: string;\n    onlyLogin?: boolean;\n}> = ({ enabledGuest, title, actionTitle, onlyLogin = false }) => {\n    const { state: appContextState, path, _t } = useAppContext();\n    const { isAuthenticated, userInfos, logout } = useAuth();\n    const [formData, updateFormData] = useState({\n        firstname: userInfos?.firstname || '',\n        lastname: userInfos?.lastname || '',\n        email: userInfos?.email || '',\n    });\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        updateFormData({\n            ...formData,\n            [event.target.name]: event.target.value.trim(),\n        });\n    };\n    const displayOnlyLogin = onlyLogin || isAuthenticated;\n    console.log(\"check1\")\n    const [number,setNumber]=useState('');\n    const [location,setLocation]=useState('');\n    const [load,setLoad]=useState(false);\n\n    const handleNumber=(e:any)=>{\n        setNumber(e.target.value);\n        console.log(number)\n        setLoad(!load)\n    }\n    return (\n        <div className=\"flex flex-col mt-5 gap-2 w-full sm:min-w-[400px]\">\n            {/* {userInfos?.email && (\n\n                <div>\n                    <div className=\"bg-grey2 px-4 py-2 rounded\">\n                        <button\n                            className=\"float-right bg-[#000] text-[#fff] px-4 py-2 rounded mt-2\"\n                            onClick={() => logout()}\n                        >\n                            {_t('logout')}\n                        </button>\n                        <p className=\"clear\">\n                            <em>\n                                {_t('hello')} {userInfos?.firstname} {userInfos?.lastname} ({userInfos?.email})\n                            </em>\n                            <br />\n                            {_t('stillYourSession')}\n                        </p>\n                    </div>\n                </div>\n            )}\n            <h1 className=\"font-bold text-2xl\">\n                {title.replace('Register', isAuthenticated ? _t('login') : _t('register'))}\n            </h1>\n            <p className=\"mb-5  text-lg\">{_t('willSendYouMagickLink')}</p>\n            <form\n                onSubmit={async (event: FormEvent<HTMLFormElement>) => {\n                    event.preventDefault();\n                    const api = ServiceAPI({\n                        language: appContextState.language,\n                        serviceApiUrl: appContextState.serviceApiUrl,\n                    });\n                    if (onlyLogin) {\n                        await api.sendMagickLink(formData.email, path('/orders'));\n                    } else {\n                        await api.registerAndSendMagickLink(formData);\n                    }\n                    alert('We sent you a magick link, check your email.');\n                }}\n            >\n                {!displayOnlyLogin && (\n                    <div className=\"grid md:grid-cols-2 grid-cols-1 w-full gap-2\">\n                        <Input\n                            defaultValue={formData.firstname || userInfos?.firstname}\n                            label={_t('address.firstname')}\n                            placeholder=\"Luke\"\n                            name=\"firstname\"\n                            required\n                            onChange={handleChange}\n                        />\n\n                        <Input\n                            defaultValue={formData.lastname || userInfos?.lastname}\n                            placeholder=\"Skywalker\"\n                            label={_t('address.lastname')}\n                            name=\"lastname\"\n                            required\n                            onChange={handleChange}\n                        />\n                    </div>\n                )}\n                <div className=\"mt-2\">\n                    <Input\n                        defaultValue={formData.email || userInfos?.email}\n                        placeholder=\"luke.skywalker@rebellion.inc\"\n                        label={_t('address.email')}\n                        name=\"email\"\n                        required\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className=\"flex justify-start\">\n                    {enabledGuest && (\n                        <button\n                            type=\"button\"\n                            className=\"underline px-5 py-2 ml-2 rounded mt-5 w-full\"\n                            onClick={() => {\n                                if (enabledGuest) {\n                                    enabledGuest();\n                                }\n                            }}\n                        >\n                            {_t('guestCheckout')}\n                        </button>\n                    )}\n                    <button type=\"submit\" className=\"bg-[#000] text-[#fff] px-8 py-4 rounded mt-5 w-full\">\n                        {actionTitle.replace('Register', isAuthenticated ? _t('login') : _t('register'))}\n                    </button>\n                </div>\n            </form> */}\n             \n             <h1 className='font-bold text-2xl mt-5 mb-3'>Inquiry form</h1>\n                        <div className='flex '>\n\n                        <div className='m-2'>\n                        <label className='text-sm font-semibold' htmlFor=\"phonenumber\">Phone Number</label><input value={number} onChange={handleNumber}  className=' w-[400px] p-4 rounded-sm block bg-grey h-[50px] ' type=\"text\" placeholder='+91 9022xxxxxx' />\n                        </div>\n\n                        <div className='m-2 '>\n                        <label  htmlFor=\"location\" className='text-sm font-semibold'>Location</label> <input type=\"text\" className=\"w-[400px] p-4 rounded-sm block bg-grey h-[50px] w-fulll\"  placeholder='Jaipur' />\n                        </div>\n\n                        </div>\n                        <button type='submit' onClick={()=>{console.log('hello')}} className=\"bg-black text-white rounded-md px-6 py-3 mt-5 float-right\">Inquire</button> \n        </div>\n    );\n};\n"],
  "mappings": "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",
  "names": ["InvalidCharacterError", "message", "this", "prototype", "Error", "name", "window", "atob", "bind", "input", "str", "String", "replace", "length", "bs", "buffer", "bc", "idx", "output", "charAt", "fromCharCode", "indexOf", "decodeURIComponent", "m", "p", "code", "charCodeAt", "toString", "toUpperCase", "err", "InvalidTokenError", "token", "options", "pos", "header", "JSON", "parse", "base64_url_decode", "split", "e", "import_react", "e"]
}
