{
  "version": 3,
  "sources": ["../../../node_modules/@rehooks/local-storage/src/is-browser.ts", "../../../node_modules/@rehooks/local-storage/src/storage.ts", "../../../node_modules/@rehooks/local-storage/src/local-storage-events.ts", "../../../node_modules/@rehooks/local-storage/src/use-localstorage.ts", "../../../node_modules/@rehooks/local-storage/src/index.ts"],
  "sourcesContent": ["export const isBrowser = () => {\n  return typeof window !== 'undefined' && typeof window.document !== 'undefined'\n}\n", "import { isBrowser } from './is-browser'\n\n/**\n * Test if localStorage API is available\n * From https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n * @returns {boolean}\n */\nexport function localStorageAvailable(): boolean {\n  try {\n    var x = '@rehooks/local-storage:' + new Date().toISOString();\n    localStorage.setItem(x, x);\n    localStorage.removeItem(x);\n    return true;\n  }\n  catch(e) {\n    return isBrowser() && e instanceof DOMException && (\n      // everything except Firefox\n      e.code === 22 ||\n      // Firefox\n      e.code === 1014 ||\n      // test name field too, because code might not be present\n      // everything except Firefox\n      e.name === 'QuotaExceededError' ||\n      // Firefox\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      (localStorage && localStorage.length !== 0);\n  }\n}\n\n\ninterface IProxyStorage {\n  getItem(key: string): string | null\n  setItem(Key: string, value: string): void\n  removeItem(key: string): void\n}\n\nexport class LocalStorageProxy implements IProxyStorage {\n  getItem(key: string): string | null {\n    return localStorage.getItem(key)\n  }\n\n  setItem(key: string, value: string): void {\n    localStorage.setItem(key, value)\n  }\n\n  removeItem(key: string): void {\n    localStorage.removeItem(key)\n  }\n}\n\nexport class MemoryStorageProxy implements IProxyStorage {\n  private _memoryStorage = new Map<string, string>()\n\n  getItem(key: string): string | null {\n    return this._memoryStorage.get(key) ?? null\n  }\n\n  setItem(key: string, value: string): void {\n    this._memoryStorage.set(key, value)\n  }\n\n  removeItem(key: string): void {\n    this._memoryStorage.delete(key)\n  }\n}\n\nconst proxyStorageFrom = (isAvailable: boolean) => isAvailable\n  ? new LocalStorageProxy()\n  : new MemoryStorageProxy()\n\nexport const storage = proxyStorageFrom(localStorageAvailable())\n", "import { storage } from './storage';\nimport { isBrowser } from './is-browser'\n\nexport const LOCAL_STORAGE_CHANGE_EVENT_NAME = 'onLocalStorageChange';\n\n/**\n * CustomEvent polyfill derived from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n */\n(() => {\n    if (!isBrowser()) {\n      return;\n    }\n\n    if (typeof global.window.CustomEvent === 'function') {\n      return;\n    }\n\n    function CustomEvent<T>(\n        typeArg: string,\n        params: CustomEventInit<T> = { bubbles: false, cancelable: false }\n    ): CustomEvent<T> {\n        const evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(typeArg, params?.bubbles ?? false, params?.cancelable ?? false, params?.detail);\n        return evt;\n    }\n\n    window.CustomEvent = CustomEvent as unknown as typeof window.CustomEvent;\n})();\n\nexport interface LocalStorageEventPayload<TValue> {\n    key: string;\n    value: TValue;\n}\n\n/**\n * Checks if the event that is passed in is the same type as LocalStorageChanged.\n *\n * @export\n * @template TValue\n * @param {*} evt the object you wish to assert as a onLocalStorageChange event.\n * @returns {evt is LOCAL_STORAGE_CHANGE_EVENT_NAME} if true, evt is asserted to be onLocalStorageChange.\n */\nexport function isTypeOfLocalStorageChanged<TValue>(evt: CustomEvent): boolean {\n    return !!evt && evt.type === LOCAL_STORAGE_CHANGE_EVENT_NAME\n}\n\n/**\n * Use this instead of directly using localStorage.setItem\n * in order to correctly send events within the same window.\n *\n * @example\n * ```js\n * writeStorage('hello', JSON.stringify({ name: 'world' }));\n * const { name } = JSON.parse(localStorage.getItem('hello'));\n * ```\n *\n * @export\n * @param {string} key The key to write to in the localStorage.\n * @param {string} value The value to write to in the localStorage.\n */\nexport function writeStorage<TValue>(key: string, value: TValue) {\n    if (!isBrowser()) {\n        return;\n    }\n\n    try {\n        storage.setItem(key, typeof value === 'object' ? JSON.stringify(value) : `${value}`);\n        window.dispatchEvent(\n          new CustomEvent(LOCAL_STORAGE_CHANGE_EVENT_NAME, {\n              detail: { key, value },\n          })\n        )\n    } catch (err) {\n        if (err instanceof TypeError && err.message.includes('circular structure')) {\n            throw new TypeError(\n                'The object that was given to the writeStorage function has circular references.\\n' +\n                'For more information, check here: ' +\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value'\n            );\n        }\n        throw err;\n    }\n}\n\n\n/**\n * Use this function to delete a value from localStorage.\n *\n * After calling this function, the localStorage value will be null.\n *\n * @example\n * ```js\n * const user = { name: 'John', email: 'John@fakemail.com' };\n *\n * // Add a user to your localStorage\n * writeStorage('user', JSON.stringify(user));\n *\n * // This will also trigger an update to the state of your component\n * deleteFromStorage('user');\n *\n * localStorage.getItem('user') === null // \u2714 This is now null\n * ```\n *\n * @export\n * @param {string} key The key of the item you wish to delete from localStorage.\n */\nexport function deleteFromStorage(key: string) {\n    if (!isBrowser()) {\n        return;\n    }\n\n    storage.removeItem(key);\n    window.dispatchEvent(\n      new CustomEvent(LOCAL_STORAGE_CHANGE_EVENT_NAME, {\n          detail: { key, value: null },\n      })\n    )\n}\n", "import {\n  writeStorage,\n  deleteFromStorage,\n  isTypeOfLocalStorageChanged,\n  LOCAL_STORAGE_CHANGE_EVENT_NAME,\n} from './local-storage-events';\nimport { isBrowser } from './is-browser'\nimport { storage  } from './storage'\nimport { useEffect, useState, useCallback } from 'react';\n\n/**\n * This exists for trying to serialize the value back to JSON.\n * If it cannot serialize it, then it was a string value given.\n *\n * @param value the value you wish to try to parse\n */\nfunction tryParse(value: string) {\n  try {\n    return JSON.parse(value);\n  } catch {\n    return value;\n  }\n}\n\nexport type LocalStorageNullableReturnValue<TValue> = [TValue | null, (newValue: TValue | null) => void, () => void];\nexport type LocalStorageReturnValue<TValue> = [TValue, (newValue: TValue | null) => void, () => void];\n\n/**\n * React hook to enable updates to state via localStorage.\n * This updates when the {writeStorage} function is used, when the returned function\n * is called, or when the \"storage\" event is fired from another tab in the browser.\n * This function takes an optional default value to start off with.\n *\n * @example\n * ```js\n * const MyComponent = () => {\n *   const [myStoredItem, setMyStoredItem] = useLocalStorage('myStoredItem');\n *   return (\n *     <p>{myStoredItem}</p>\n *   );\n * };\n * ```\n *\n * @export\n * @template TValue The type of the given default value.\n * @param {string} key The key in the localStorage that you wish to watch.\n * @param {TValue} defaultValue Optional default value to start with.\n * @returns {[TValue | null, Dispatch<TValue>, Dispatch<void>]} An array containing the value\n * associated with the key in position 0, a function to set the value in position 1,\n * and a function to delete the value from localStorage in position 2.\n */\nexport function useLocalStorage<TValue = string>(key: string): LocalStorageNullableReturnValue<TValue>;\nexport function useLocalStorage<TValue = string>(key: string, defaultValue: TValue): LocalStorageReturnValue<TValue>;\nexport function useLocalStorage<TValue = string>(\n  key: string,\n  defaultValue: TValue | null = null,\n) {\n  const [localState, updateLocalState] = useState<TValue | null>(\n    storage.getItem(key) === null\n      ? defaultValue\n      : tryParse(storage.getItem(key)!)\n  );\n\n  const onLocalStorageChange = useCallback((event: any | StorageEvent) => {\n    // An event value can be of TValue when `localStorage.setItem` is called, or null when\n    // `localStorage.removeItem` is called.\n    if (isTypeOfLocalStorageChanged<TValue>(event)) {\n      if (event.detail.key === key) {\n        updateLocalState(event.detail.value);\n      }\n    } else {\n      if (event.key === key) {\n        updateLocalState(event.newValue === null ? null : tryParse(event.newValue));\n      }\n    }\n  }, [updateLocalState, key]);\n\n  useEffect(() => {\n    if (!isBrowser()) {\n      return\n    }\n\n    // The custom storage event allows us to update our component\n    // when a change occurs in localStorage outside of our component\n    const listener = (e: Event) => {\n      onLocalStorageChange(e)\n    };\n\n    window.addEventListener(LOCAL_STORAGE_CHANGE_EVENT_NAME, listener);\n\n    // The storage event only works in the context of other documents (eg. other browser tabs)\n    window.addEventListener('storage', listener);\n\n    // Write default value to the local storage if there currently isn't any value there.\n    // Don't however write a defaultValue that is null otherwise it'll trigger infinite updates.\n    if (storage.getItem(key) === null && defaultValue !== null) {\n      writeStorage(key, defaultValue);\n    }\n\n    return () => {\n      window.removeEventListener(LOCAL_STORAGE_CHANGE_EVENT_NAME, listener);\n      window.removeEventListener('storage', listener);\n    };\n  }, [key, defaultValue, onLocalStorageChange]);\n\n  const writeState = useCallback((value: TValue) => writeStorage(key, value), [key]);\n  const deleteState = useCallback(() => deleteFromStorage(key), [key]);\n  const state: TValue | null = localState ?? defaultValue;\n\n  return [state, writeState, deleteState];\n}\n", "import { useLocalStorage } from './use-localstorage';\n\nexport { writeStorage, deleteFromStorage } from './local-storage-events';\n\nexport { useLocalStorage };\n\nexport default useLocalStorage;\n"],
  "mappings": "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",
  "names": ["LocalStorageProxy", "MemoryStorageProxy", "CustomEvent"]
}
