{
  "version": 3,
  "sources": ["../../../src/use-cases/service-api/index.ts", "../../../src/use-cases/service-api/payments/crystal.ts"],
  "sourcesContent": ["import { getJson, postJson } from '@crystallize/reactjs-hooks';\nimport { Customer } from '../contracts/Customer';\nimport { LocalCart } from '../contracts/LocalCart';\nimport { sendPaidOrderWithCrystalCard, sendPaidOrderWithCrystalCoin } from './payments/crystal';\n\nexport function placeCart(\n    serviceApiUrl: string,\n    language: string,\n    cart: LocalCart,\n    customer: Partial<Customer>,\n    options?: { pickupPoint: any },\n) {\n    return postJson<any>(serviceApiUrl + '/cart/place', {\n        cartId: cart.cartId,\n        locale: language,\n        items: Object.values(cart.items),\n        customer,\n        options,\n    });\n}\n\nexport type ServiceAPIContext = {\n    locale?: string;\n    language: string;\n    serviceApiUrl: string;\n};\n\nexport const ServiceAPI = ({ locale, language, serviceApiUrl }: ServiceAPIContext) => {\n    return {\n        stripe: {\n            fetchPaymentIntent: (cart: LocalCart) =>\n                postJson<any>(serviceApiUrl + '/payment/stripe/create', { cartId: cart.cartId }),\n        },\n        quickpay: {\n            fetchPaymentLink: (cart: LocalCart) =>\n                postJson<any>(serviceApiUrl + '/payment/quickpay/create', { cartId: cart.cartId }),\n        },\n        montonio: {\n            fetchPaymentLink: (cart: LocalCart) =>\n                postJson<any>(serviceApiUrl + '/payment/montonio/create', { cartId: cart.cartId }),\n            fetchPickupPoints: () => getJson<any>(serviceApiUrl + '/shipping/montonio/pickup-points'),\n        },\n        klarna: {\n            initiatePayment: (cart: LocalCart) =>\n                postJson<any>(serviceApiUrl + '/payment/klarna/create', { cartId: cart.cartId }),\n        },\n        razorpay: {\n            initiatePayment: (cart: LocalCart) =>\n                postJson<any>(serviceApiUrl + '/payment/razorpay/create', { cartId: cart.cartId }),\n            receivePayment: (baseUrl: string, payload: any) =>\n                postJson<any>(baseUrl + '/api/webhook/payment/razorpay/verify', payload),\n        },\n        fetchOrders: () => getJson<any>(serviceApiUrl + '/orders'),\n        fetchOrder: (orderId: string) => getJson<any>(serviceApiUrl + '/orders/' + orderId),\n        placeCart: (cart: LocalCart, customer: Partial<Customer>, options?: { pickupPoint: any }) =>\n            placeCart(serviceApiUrl, language, cart, customer, options),\n        registerAndSendMagickLink: (userInfos: any) => postJson<any>(serviceApiUrl + '/magicklink/register', userInfos),\n        sendMagickLink: (email: string, callbackPath: string) =>\n            postJson<any>(serviceApiUrl + '/magicklink/register?callbackPath=' + callbackPath, {\n                email,\n                firstname: '',\n                lastname: '',\n            }),\n        fetchCart: (cartId: string) => getJson<any>(serviceApiUrl + '/cart/' + cartId),\n        fetchRemoteCart: (cart: LocalCart) =>\n            postJson<any>(serviceApiUrl + '/cart', {\n                locale: language,\n                items: Object.values(cart.items),\n                cartId: cart.cartId,\n                withImages: true,\n            }),\n        // THIS SHOULD BE REMOVED IN A REAL PROJECT\n        sendPaidOrderWithCrystalCoin: (cart: LocalCart, customer: Partial<Customer>) =>\n            sendPaidOrderWithCrystalCoin(serviceApiUrl, language, cart, customer),\n        // THIS SHOULD BE REMOVED IN A REAL PROJECT\n        sendPaidOrderWithCrystalCard: (cart: LocalCart, customer: Partial<Customer>, card: any) =>\n            sendPaidOrderWithCrystalCard(serviceApiUrl, language, cart, customer, card),\n    };\n};\n", "import { postJson } from '@crystallize/reactjs-hooks';\nimport { Customer } from '../../contracts/Customer';\nimport { LocalCart } from '../../contracts/LocalCart';\nimport { placeCart } from '..';\n\n// /!\\ in real life that would not be that simple and the paid acknowledgement would be a separate service and/or call by the payment provider\n// THIS SHOULD BE REMOVED IN A REAL PROJECT\nexport async function sendPaidOrderWithCrystalCoin(\n    serviceApiUrl: string,\n    language: string,\n    cart: LocalCart,\n    customer: Partial<Customer>,\n) {\n    const cartWrapper = await placeCart(serviceApiUrl, language, cart, customer);\n    return await postJson<any>(serviceApiUrl + '/payment/crystal/coin/confirmed', {\n        cartId: cartWrapper.cartId,\n    });\n}\n\n// /!\\ in real life that would not be that simple and the paid acknowledgement would be a separate service and/or call by the payment provider\n// THIS SHOULD BE REMOVED IN A REAL PROJECT\nexport async function sendPaidOrderWithCrystalCard(\n    serviceApiUrl: string,\n    language: string,\n    cart: LocalCart,\n    customer: Partial<Customer>,\n    card: any,\n) {\n    const cartWrapper = await placeCart(serviceApiUrl, language, cart, customer);\n    return await postJson<any>(serviceApiUrl + '/payment/crystal/card/confirmed', {\n        cartId: cartWrapper.cartId,\n        card,\n    });\n}\n"],
  "mappings": ";;;;;;;;AAAA,IAAAA,wBAAkC;;;ACAlC,2BAAyB;AAOzB,eAAsB,6BAClB,eACA,UACA,MACA,UACF;AACE,QAAM,cAAc,MAAM,UAAU,eAAe,UAAU,MAAM,QAAQ;AAC3E,SAAO,UAAM,+BAAc,gBAAgB,mCAAmC;AAAA,IAC1E,QAAQ,YAAY;AAAA,EACxB,CAAC;AACL;AAIA,eAAsB,6BAClB,eACA,UACA,MACA,UACA,MACF;AACE,QAAM,cAAc,MAAM,UAAU,eAAe,UAAU,MAAM,QAAQ;AAC3E,SAAO,UAAM,+BAAc,gBAAgB,mCAAmC;AAAA,IAC1E,QAAQ,YAAY;AAAA,IACpB;AAAA,EACJ,CAAC;AACL;;;AD5BO,SAAS,UACZ,eACA,UACA,MACA,UACA,SACF;AACE,aAAO,gCAAc,gBAAgB,eAAe;AAAA,IAChD,QAAQ,KAAK;AAAA,IACb,QAAQ;AAAA,IACR,OAAO,OAAO,OAAO,KAAK,KAAK;AAAA,IAC/B;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAQO,IAAM,aAAa,CAAC,EAAE,QAAQ,UAAU,cAAc,MAAyB;AAClF,SAAO;AAAA,IACH,QAAQ;AAAA,MACJ,oBAAoB,CAAC,aACjB,gCAAc,gBAAgB,0BAA0B,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,IACvF;AAAA,IACA,UAAU;AAAA,MACN,kBAAkB,CAAC,aACf,gCAAc,gBAAgB,4BAA4B,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,IACzF;AAAA,IACA,UAAU;AAAA,MACN,kBAAkB,CAAC,aACf,gCAAc,gBAAgB,4BAA4B,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,MACrF,mBAAmB,UAAM,+BAAa,gBAAgB,kCAAkC;AAAA,IAC5F;AAAA,IACA,QAAQ;AAAA,MACJ,iBAAiB,CAAC,aACd,gCAAc,gBAAgB,0BAA0B,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,IACvF;AAAA,IACA,UAAU;AAAA,MACN,iBAAiB,CAAC,aACd,gCAAc,gBAAgB,4BAA4B,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,MACrF,gBAAgB,CAAC,SAAiB,gBAC9B,gCAAc,UAAU,wCAAwC,OAAO;AAAA,IAC/E;AAAA,IACA,aAAa,UAAM,+BAAa,gBAAgB,SAAS;AAAA,IACzD,YAAY,CAAC,gBAAoB,+BAAa,gBAAgB,aAAa,OAAO;AAAA,IAClF,WAAW,CAAC,MAAiB,UAA6B,YACtD,UAAU,eAAe,UAAU,MAAM,UAAU,OAAO;AAAA,IAC9D,2BAA2B,CAAC,kBAAmB,gCAAc,gBAAgB,wBAAwB,SAAS;AAAA,IAC9G,gBAAgB,CAAC,OAAe,qBAC5B,gCAAc,gBAAgB,uCAAuC,cAAc;AAAA,MAC/E;AAAA,MACA,WAAW;AAAA,MACX,UAAU;AAAA,IACd,CAAC;AAAA,IACL,WAAW,CAAC,eAAmB,+BAAa,gBAAgB,WAAW,MAAM;AAAA,IAC7E,iBAAiB,CAAC,aACd,gCAAc,gBAAgB,SAAS;AAAA,MACnC,QAAQ;AAAA,MACR,OAAO,OAAO,OAAO,KAAK,KAAK;AAAA,MAC/B,QAAQ,KAAK;AAAA,MACb,YAAY;AAAA,IAChB,CAAC;AAAA,IAEL,8BAA8B,CAAC,MAAiB,aAC5C,6BAA6B,eAAe,UAAU,MAAM,QAAQ;AAAA,IAExE,8BAA8B,CAAC,MAAiB,UAA6B,SACzE,6BAA6B,eAAe,UAAU,MAAM,UAAU,IAAI;AAAA,EAClF;AACJ;",
  "names": ["import_reactjs_hooks"]
}
