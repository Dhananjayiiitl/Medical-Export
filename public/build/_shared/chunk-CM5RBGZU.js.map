{
  "version": 3,
  "sources": ["../../../src/ui/lib/grid-tile/grid.tsx", "../../../src/ui/lib/grid-tile/generic-item.tsx", "../../../src/ui/lib/grid-tile/generic-tile-view.tsx", "../../../src/ui/components/item/document.tsx", "../../../src/ui/components/item/curated-product.tsx", "../../../src/ui/components/grid/tiles/banner.tsx", "../../../src/ui/lib/grid-tile/linkRenderer.tsx", "../../../src/ui/components/grid/tiles/embed.tsx", "../../../src/ui/components/grid/tiles/slider.tsx", "../../../src/ui/components/grid/grid.tsx", "../../../src/ui/components/grid/tiles/hero-slider.tsx"],
  "sourcesContent": ["import { GridCell, GridRenderer, GridRenderingType, GridRow } from '@crystallize/reactjs-components/dist/grid';\nimport React from 'react';\nimport { GenericItem } from './generic-item';\nimport { GenericTileView } from './generic-tile-view';\nimport { Item, ItemComponentMapping, Tile, TileViewComponentMapping, TileViewWrapperOptions } from './types';\nimport { Video } from '@crystallize/reactjs-components/dist/video';\nimport { Image } from '@crystallize/reactjs-components/dist/image';\n\nexport const Grid: React.FC<{\n    grid: {\n        rows: GridRow[];\n    };\n    tileViewComponentMapping: TileViewComponentMapping;\n    itemComponentMapping: ItemComponentMapping;\n    type?: GridRenderingType;\n    style?: React.CSSProperties;\n    styleForCell?: (cell: GridCell, styles: React.CSSProperties) => React.CSSProperties;\n    options?: TileViewWrapperOptions;\n}> = ({\n    grid,\n    tileViewComponentMapping,\n    itemComponentMapping,\n    type = GridRenderingType.RowCol,\n    options,\n    style,\n    styleForCell,\n}) => {\n    return (\n        <GridRenderer\n            grid={grid}\n            type={type}\n            styleForCell={styleForCell}\n            style={style}\n            cellComponent={({ cell, dimensions, children }) => {\n                const cellItem: Tile | Item = cell?.item;\n\n                if (!cellItem) {\n                    return null;\n                }\n                const tile = normalizeTile(cellItem);\n                if (tile?.view) {\n                    const Component = tileViewComponentMapping[tile.view] || GenericTileView;\n                    return (\n                        <Tile tile={tile} options={options}>\n                            <Component tile={tile} options={{ dimensions, layout: cell.layout }}>\n                                {children}\n                            </Component>\n                        </Tile>\n                    );\n                }\n                const Component = itemComponentMapping[cellItem.type.toLowerCase()] || GenericItem;\n                return (\n                    <div style={options?.style}>\n                        <Component item={cellItem} options={{ dimensions, layout: cell.layout }}>\n                            {children}\n                        </Component>\n                    </div>\n                );\n            }}\n        />\n    );\n};\n\nconst Tile: React.FC<{ tile: Tile | Item; children: React.ReactNode; options?: TileViewWrapperOptions }> = ({\n    tile,\n    children,\n    options,\n}) => {\n    let backgroundElement = null;\n    const { background } = tile;\n    if (background.images && background.images.length > 0) {\n        backgroundElement = (\n            <div className=\"crystallize-background-image\" style={options?.background?.style}>\n                <Image\n                    {...background.images[0]}\n                    {...options?.background?.imageProps}\n                    size=\"100vw\"\n                    fallbackAlt={tile.title}\n                />\n            </div>\n        );\n    }\n    if (background.videos && background.videos.length > 0) {\n        backgroundElement = (\n            <div className=\"crystallize-background-video\" style={options?.background?.style}>\n                <Video\n                    {...background.videos[0]}\n                    {...options?.background?.imageProps}\n                    autoPlay\n                    loop\n                    muted\n                    controls={false}\n                />\n            </div>\n        );\n    }\n    return (\n        <div\n            className={`crystallize-tile crystallize-tile-view-${tile.view} ${\n                tile.cssPreset ? 'crystallize-tile-preset-' + tile.cssPreset : ''\n            }`}\n            style={{\n                ...options?.style,\n                background: tile.styling?.background?.color ?? null,\n                color: tile.styling?.font?.color ?? null,\n                // fontSize: tile.styling?.font?.size ?? null,\n            }}\n        >\n            {backgroundElement}\n            <div style={{ width: '100%', zIndex: 20 }}>{children}</div>\n        </div>\n    );\n};\n\nconst componentContent = (cellItem: any, id: string, fallbackValue: any = undefined): any | undefined => {\n    const component = cellItem.components.find((component: any) => component.id === id);\n    return component?.content || fallbackValue;\n};\n\nconst componentChoiceContent = (\n    cellItem: any,\n    id: string,\n    choiceId: string,\n    fallbackValue: any = undefined,\n): any | undefined => {\n    const component = cellItem.components.find((component: any) => component.id === id);\n    return component?.content?.selectedComponent?.content[choiceId] || fallbackValue;\n};\n\nconst componentChunkContent = (\n    cellItem: any,\n    id: string,\n    chunkId: string,\n    fallbackValue: any = undefined,\n): any | undefined => {\n    const component = cellItem.components.find((component: any) => component.id === id);\n    const chunk = component?.content?.chunks[0]?.find((chunk: any) => chunk.id === chunkId);\n    return chunk?.content || fallbackValue;\n};\n\nconst normalizeTile = (cellItem: any): Tile | null => {\n    const components = cellItem.components;\n    if (!components) {\n        return null;\n    }\n    const styling = componentChunkContent(cellItem, 'styling', 'properties', [])?.sections?.reduce(\n        (result: any, section: any) => {\n            const sectionName = section.title.toLowerCase();\n            section.properties.forEach((property: any) => {\n                if (!result[sectionName]) {\n                    result[sectionName] = {};\n                }\n                result[sectionName][property.key.toLowerCase()] = property.value;\n            });\n            return result;\n        },\n        {},\n    );\n\n    return {\n        view: componentContent(cellItem, 'view')?.options[0]?.value.toLowerCase(),\n        title: componentContent(cellItem, 'title')?.text,\n        description: componentContent(cellItem, 'description')?.plainText.join(' '),\n        content: {\n            images: componentChoiceContent(cellItem, 'content', 'images') || undefined,\n            videos: componentChoiceContent(cellItem, 'content', 'videos') || undefined,\n            items: componentChoiceContent(cellItem, 'content', 'items') || undefined,\n        },\n        ctas:\n            componentContent(cellItem, 'ctas')?.chunks.map((cta: any) => {\n                return {\n                    text: cta[0].content?.text,\n                    link: cta[1].content?.text,\n                };\n            }) || [],\n        background: {\n            images: componentChoiceContent(cellItem, 'background', 'images') || undefined,\n            videos: componentChoiceContent(cellItem, 'background', 'videos') || undefined,\n        },\n        styling,\n        isFullWidth: componentChunkContent(cellItem, 'styling', 'use-full-width')?.value || false,\n        cssPreset: componentChunkContent(cellItem, 'styling', 'css-preset')?.options?.[0]?.key?.toLowerCase(),\n    };\n};\n", "import { ItemViewComponentProps } from '../../lib/grid-tile/types';\n\nexport const GenericItem: React.FC<ItemViewComponentProps> = ({ item }) => {\n    return (\n        <div className={`crystallize-generic-item`}>\n            <a href={item.path}>{item.name ?? ''}</a>\n        </div>\n    );\n};\n", "import { Video } from '@crystallize/reactjs-components/dist/video';\nimport { Image } from '@crystallize/reactjs-components/dist/image';\nimport { TileViewComponentProps } from '../../lib/grid-tile/types';\n\nexport const GenericTileView: React.FC<TileViewComponentProps> = ({ tile, options }) => {\n    const { title, description, content, ctas, styling } = tile;\n\n    return (\n        <div\n            className={`crystallize-generic-tile-view view-${tile.view}`}\n            style={{ backgroundColor: styling?.background.color }}\n        >\n            <div className=\"crystallize-generic-tile-view-header\">\n                {title && <h2>{title}</h2>}\n                {description && <p>{description}</p>}\n            </div>\n            <div className=\"crystallize-generic-tile-view-body\">\n                {content.images && content.images.length > 0 && <GenericTileViewWithImage image={content.images[0]} />}\n                {content.videos && content.videos.length > 0 && <GenericTileViewWithVideo video={content.videos[0]} />}\n                {content.items && content.items.length > 0 && <GenericTileViewWithItems items={content.items} />}\n            </div>\n\n            {ctas && ctas.length > 0 && (\n                <div className=\"crystallize-generic-tile-view-ctas\">\n                    {ctas.map((cta) => (\n                        <button className=\"crystallize-generic-tile-view-cta\" key={cta.link}>\n                            <a href={cta.link}>{cta.text}</a>\n                        </button>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport const GenericTileViewWithItems: React.FC<{ items: any[] }> = ({ items }) => {\n    return (\n        <div className=\"crystallize-generic-tile-view-body-items\">\n            {items.map((item: any, index: number) => {\n                return <GenericTileViewWithEmbed item={item} key={index} />;\n            })}\n        </div>\n    );\n};\n\nexport const GenericTileViewWithEmbed: React.FC<{ item: any }> = ({ item }) => {\n    return (\n        <div className=\"crystallize-generic-tile-view-item\">\n            <a href={item.path}>{item.name ?? ''}</a>\n        </div>\n    );\n};\n\nexport const GenericTileViewWithImage: React.FC<{ image: any }> = ({ image }) => {\n    return (\n        <div className=\"crystallize-generic-tile-view-image \">\n            <Image {...image} sizes=\"(max-width: 500px) 300px, 700px\" loading=\"lazy\" />\n        </div>\n    );\n};\n\nexport const GenericTileViewWithVideo: React.FC<{ video: any }> = ({ video }) => {\n    return (\n        <div className=\"crystallize-generic-tile-view-video\">\n            <Video {...video} />\n        </div>\n    );\n};\n", "import { Image } from '@crystallize/reactjs-components';\nimport Link from '../../bridge/Link';\nimport { useAppContext } from '../../app-context/provider';\nimport { StorySlim, CuratedStorySlim } from '~/use-cases/contracts/Story';\nimport {\n    choiceComponentWithId,\n    chunksForChunkComponentWithId,\n    itemsForItemRelationComponentWithId,\n    numericValueForComponentWithId,\n    stringForSingleLineComponentWithId,\n} from '~/use-cases/mapper/api-mappers';\nimport { ItemViewComponentProps } from '../../lib/grid-tile/types';\nimport { CuratedProduct } from './curated-product';\nimport { DataMapper } from '~/use-cases/mapper';\nimport { ProductSlim } from '~/use-cases/contracts/Product';\nimport { Product } from './product';\n\nconst DefaultDocument: React.FC<{ item: StorySlim | CuratedStorySlim }> = ({ item }) => {\n    const { path } = useAppContext();\n    return (\n        <Link\n            to={path(item.path)}\n            prefetch=\"intent\"\n            className=\"grid min-h-[100%] bg-[#F5F5F5] rounded-md overflow-hidden border border-[#f5f5f5] hover:border-[#000]\"\n        >\n            <div className=\"flex flex-col justify-between items-stretch h-full overflow-hidden w-full\">\n                <div className=\"px-10 pt-20 h-1/3 \">\n                    <h2 className=\"text-2xl font-bold mb-3\">{item.title}</h2>\n                    <p className=\"embed-text\">{item.description?.plainText}</p>\n                </div>\n                <div className=\"pl-10 pt-10 max-w-full h-full min-h-[400px] img-container overflow-hidden rounded-t-l-md img-cover grow\">\n                    <Image\n                        {...item.medias?.images?.[0]}\n                        sizes=\"300px\"\n                        loading=\"lazy\"\n                        className=\"overflow-hidden rounded-tl-md \"\n                    />\n                </div>\n            </div>\n        </Link>\n    );\n};\n\nexport const Document: React.FC<{ item: StorySlim | CuratedStorySlim }> = ({ item }) => {\n    if (item.type === 'curated-product-story') {\n        return <CuratedProduct item={item} />;\n    }\n    return <DefaultDocument item={item} />;\n};\n\nexport const DocumentFromCell: React.FC<ItemViewComponentProps> = ({ item }) => {\n    const mapper = DataMapper();\n    const common = {\n        name: item.name,\n        path: item.path,\n        title: stringForSingleLineComponentWithId(item.components, 'title') || item.name!,\n    };\n\n    if (item.shape.identifier === 'curated-product-story') {\n        const intro = item.components.find((c: any) => c.id === 'description')?.content;\n        const media = item.components.find((c: any) => c.id === 'shoppable-image')?.content;\n        return (\n            <Document\n                item={{\n                    ...common,\n                    description: intro,\n                    type: 'curated-product-story',\n                    medias: {\n                        images: mapper.API.Object.APIImageToImage(media.images),\n                        videos: [],\n                    },\n                    merchandising:\n                        chunksForChunkComponentWithId(item.components, 'merchandising')?.map((chunk) => {\n                            return {\n                                products:\n                                    itemsForItemRelationComponentWithId(chunk, 'products')?.map((product: any) => {\n                                        return {\n                                            id: product.id,\n                                            name: product.name,\n                                            path: product.path,\n                                            variant: mapper.API.Object.APIProductVariantToProductVariant(\n                                                product.defaultVariant,\n                                            ),\n                                            topics: [],\n                                        };\n                                    }) || [],\n                                x: numericValueForComponentWithId(chunk, 'hotspot-x') || 0,\n                                y: numericValueForComponentWithId(chunk, 'hotspot-y') || 0,\n                            };\n                        }) || [],\n                }}\n            />\n        );\n    }\n\n    const intro = item.components.find((c: any) => c.id === 'intro')?.content;\n    const media = choiceComponentWithId(item.components, 'media');\n    return (\n        <Document\n            item={{\n                ...common,\n                description: intro,\n                type: 'story',\n                medias: {\n                    images: media ? mapper.API.Object.APIImageToImage(media.content.images) : [],\n                    videos: [],\n                },\n            }}\n        />\n    );\n};\n", "import { Image } from '@crystallize/reactjs-components';\nimport Link from '../../bridge/Link';\nimport { useAppContext } from '../../app-context/provider';\nimport { CuratedStorySlim } from '~/use-cases/contracts/Story';\n\nexport const CuratedProduct: React.FC<{ item: CuratedStorySlim }> = ({ item }) => {\n    const { state: contextState, path } = useAppContext();\n\n    const title = item.title;\n    const description = item.description.plainText;\n    const shoppableImage = item.medias.images?.[0];\n    let merchandising = item.merchandising;\n\n    return (\n        <Link\n            to={path(item.path)}\n            prefetch=\"intent\"\n            className=\"grid min-h-[100%] w-full bg-[#F5F5F5] relative rounded-md border border-[#f5f5f5] hover:border-[#000]\"\n        >\n            <div className=\"flex flex-col justify-between items-stretch h-full w-full\">\n                <div className=\"px-10 pt-20 pb-6 \">\n                    {title && <h2 className=\"text-2xl font-bold mb-3\">{title}</h2>}\n                    {description && <p className=\"embed-text\">{description}</p>}\n                </div>\n                <div className=\"img-container pl-10 w-full lg:col-span-3 self-start rounded-tl-lg relative\">\n                    <div className=\"absolute h-full w-full frntr-hotspot frntr-hotspot-microformat\">\n                        {merchandising.map((merch, i) => (\n                            <span\n                                key={`hotspot-${merch.x}-${merch.y}`}\n                                style={{ left: merch.y + `%`, top: merch.y + '%' }}\n                            >\n                                <div className=\"rounded-sm shadow-sm px-2 pt-2 \">\n                                    {merch.products.map((product) => (\n                                        <div className=\"flex items-center gap-2 pb-2\" key={product.id}>\n                                            <div className=\"img-container img-cover w-[30px] h-[40px]\">\n                                                <Image\n                                                    {...product.variant.images?.[0]}\n                                                    sizes=\"100px\"\n                                                    loading=\"lazy\"\n                                                    fallbackAlt={product.name}\n                                                />\n                                            </div>\n                                            <div>\n                                                <div className=\"text-xs\">{product.name}</div>\n                                                <div className=\"text-xs font-bold\">\n                                                    {contextState.currency.code}{' '}\n                                                    {product.variant.priceVariants.default.value}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                            </span>\n                        ))}\n                    </div>\n                    <Image {...shoppableImage} sizes=\"50vw\" fallbackAlt={title} />\n                </div>\n            </div>\n        </Link>\n    );\n};\n", "import { Image } from '@crystallize/reactjs-components/dist/image';\nimport { TileViewComponentProps } from '../../../lib/grid-tile/types';\nimport { LinkRenderer } from '../../../lib/grid-tile/linkRenderer';\nimport { Video } from '@crystallize/reactjs-components';\n\nexport const Banner: React.FC<TileViewComponentProps> = ({ tile }) => {\n    const { title, description, ctas, isFullWidth, content, styling } = tile;\n    const { images, videos } = content;\n    const { font, button } = styling || {};\n\n    return (\n        <div\n            className={` flex md:flex-row flex-col  w-full mx-auto  ${\n                isFullWidth ? 'px-8 lg:px-10 max-w-[1600px] w-full items-center pt-10  md:py-0 ' : 'pl-10 pt-20'\n            }`}\n        >\n            <div\n                className={`${\n                    !images?.length ? 'py-40' : isFullWidth ? 'md:w-1/2' : 'md:w-2/5'\n                } items-center pr-8 flex-column relative z-10 `}\n            >\n                {title && (\n                    <h1\n                        className={`text-[1em] leading-[1.2em] font-bold mb-3`}\n                        style={{ fontSize: font ? font.size : '2rem' }}\n                    >\n                        {title}\n                    </h1>\n                )}\n                {description && <p className={`mt-2 mb-5 max-w-[400px] leading-[1.6em]`}>{description}</p>}\n                {ctas &&\n                    ctas.map((cta) => (\n                        <button\n                            className=\"px-8 py-4 rounded font-medium\"\n                            key={cta.text}\n                            style={{\n                                color: button?.color ? button.color : '#fff',\n                                backgroundColor: button?.['background color'] ? button['background color'] : '#000',\n                                fontSize: button?.['font size'] ? button['font size'] : '1rem',\n                            }}\n                        >\n                            {cta.link ? <LinkRenderer link={cta.link} text={cta.text} /> : cta.text}\n                        </button>\n                    ))}\n            </div>\n            {images && images.length > 0 && (\n                <div className=\"self-end md:w-8/12 w-full pt-10 img-container img-contain md:py-0\">\n                    <Image\n                        {...images[0]}\n                        sizes=\"(max-width: 500px) 300px, 700px\"\n                        loading=\"lazy\"\n                        className=\"max-w-none w-full\"\n                    />\n                </div>\n            )}\n            {videos && videos.length > 0 && (\n                <div className=\"md:w-8/12 w-full img-container img-contain md:py-0\">\n                    <Video {...videos[0]} thumbnmailProps={{ sizes: '(max-width: 700px) 90vw, 700px' }} />\n                </div>\n            )}\n        </div>\n    );\n};\n", "import Link from '../../bridge/Link';\n\nexport const LinkRenderer: React.FC<{\n    link: string;\n    text: string;\n}> = ({ link, text }) => {\n    return link.startsWith('http') ? (\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n            {text}\n        </a>\n    ) : (\n        <Link to={link}>{text}</Link>\n    );\n};\n", "import { Image } from '@crystallize/reactjs-components/dist/image';\nimport { TileViewComponentProps } from '../../../lib/grid-tile/types';\nimport { LinkRenderer } from '../../../lib/grid-tile/linkRenderer';\nimport { useAppContext } from '../../../app-context/provider';\nimport Link from '../../../bridge/Link';\n\nexport const Embed: React.FC<TileViewComponentProps> = ({ tile }) => {\n    const { path } = useAppContext();\n    const { title, description, content, ctas } = tile;\n    if (!content.items || content.items.length === 0) {\n        return <p>Nothing has been embedded.</p>;\n    }\n    const firstItem = content.items[0];\n    const firstItemImage = firstItem.components.find((component: any) => component.id === 'media')?.content\n        ?.selectedComponent?.content;\n\n    return (\n        <Link to={path(firstItem.path)} prefetch=\"intent\" className=\"grid min-h-[100%]\">\n            <div className=\"flex flex-col justify-between items-stretch h-full overflow-hidden w-full\">\n                <div className=\"px-10 pt-20 md:h-1/3 \">\n                    {title && <h2 className=\"text-2xl font-bold mb-3\">{title}</h2>}\n                    {description && <p className=\"embed-text\">{description}</p>}\n                    {ctas &&\n                        ctas.map((cta) => (\n                            <button className=\"bg-ctaBlue px-8 py-4 rounded font-medium\" key={cta.link}>\n                                {cta.link ? <LinkRenderer link={cta.link} text={cta.text} /> : cta.text}\n                            </button>\n                        ))}\n                </div>\n                <div className=\"pl-10 pt-10 max-w-full h-full img-container overflow-hidden rounded-t-l-md img-cover grow\">\n                    <Image\n                        {...firstItemImage?.firstImage}\n                        sizes=\"300px\"\n                        loading=\"lazy\"\n                        className=\"overflow-hidden rounded-tl-md \"\n                    />\n                </div>\n            </div>\n        </Link>\n    );\n};\n", "import { Splide, SplideSlide } from '@splidejs/react-splide';\nimport { TileViewComponentProps } from '../../../lib/grid-tile/types';\nimport { ProductFromCell } from '../../item/product';\nimport { DocumentFromCell } from '../../item/document';\nimport { LinkRenderer } from '../../../lib/grid-tile/linkRenderer';\n\nconst itemMapping = {\n    product: ProductFromCell,\n    document: DocumentFromCell,\n};\n\nexport const Slider: React.FC<TileViewComponentProps> = ({ tile, options }) => {\n    const { dimensions, layout } = options;\n    let colspan = layout.colspan;\n    const { title, description, content, ctas, styling } = tile;\n    const spansOverAllColumns = layout.colspan === dimensions.cols;\n    const hasBackgroundColor = styling?.background.color;\n    const isFullWidth = tile.isFullWidth;\n    const setInnerPadding = () => {\n        if (!spansOverAllColumns) {\n            return 'pl-10';\n        }\n        if (spansOverAllColumns && !isFullWidth && hasBackgroundColor) {\n            return 'px-10';\n        }\n    };\n    return (\n        <div className={`${isFullWidth ? 'px-8 lg:px-10 max-w-[1650px] w-full mx-auto' : 'w-full'}`}>\n            <div className={`pb-10  pt-20 ${setInnerPadding()}`}>\n                {title && <h2 className={`${colspan > 2 ? 'text-3xl' : 'text-2xl'} mb-3 font-bold`}>{title}</h2>}\n                {description && <p className={`embed-text ${colspan > 2 ? 'w-2/4' : 'w-5/5'}`}>{description}</p>}\n                {ctas &&\n                    ctas.map((cta) => (\n                        <button className=\"bg-ctaBlue px-8 py-4 rounded font-medium\" key={cta.link}>\n                            {cta.link ? <LinkRenderer link={cta.link} text={cta.text} /> : cta.text}\n                        </button>\n                    ))}\n            </div>\n\n            <div className={setInnerPadding()}>\n                <Splide\n                    options={{\n                        rewind: true,\n                        perPage: spansOverAllColumns ? 5 : 2,\n                        breakpoints: {\n                            1200: {\n                                perPage: 4,\n                            },\n                            940: {\n                                perPage: 3,\n                            },\n                            480: {\n                                perPage: 2,\n                            },\n                        },\n                        pagination: false,\n                        gap: 10,\n                    }}\n                    className=\"splide \"\n                >\n                    {content.items &&\n                        content.items.map((item: any) => {\n                            const Component = itemMapping[item.type as keyof typeof itemMapping];\n                            return (\n                                <SplideSlide key={item.name} className=\"slide items-stretch pb-10\">\n                                    <Component item={item} />\n                                </SplideSlide>\n                            );\n                        })}\n                </Splide>\n            </div>\n        </div>\n    );\n};\n", "import { Grid as BaseGrid } from '../../lib/grid-tile/grid';\nimport { ProductFromCell } from '../../components/item/product';\nimport { DocumentFromCell } from '../../components/item/document';\nimport { Banner } from '../../components/grid/tiles/banner';\nimport { Embed } from '../../components/grid/tiles/embed';\nimport { Slider } from '../../components/grid/tiles/slider';\nimport { GridCell, GridRenderingType } from '@crystallize/reactjs-components';\nimport { HeroSlider } from './tiles/hero-slider';\n\nconst tileMapping = {\n    banner: Banner,\n    embed: Embed,\n    slider: Slider,\n    heroslider: HeroSlider,\n};\nconst itemMapping = {\n    product: ProductFromCell,\n    document: DocumentFromCell,\n};\n\nexport const Grid: React.FC<{ grid: any }> = ({ grid }) => {\n    if ((grid?.rows?.length || 0) === 0) {\n        return null;\n    }\n    const totalColumns = grid.rows[0].columns.reduce((acc: number, col: any) => acc + col.layout.colspan, 0);\n    const colWidth = Math.round(1530 / totalColumns);\n\n    const styleForCell = (cell: GridCell, styles: React.CSSProperties) => {\n        if (!cell?.item) {\n            return styles;\n        }\n\n        const component = cell.item.components.find((component: any) => component.id === 'styling');\n        if (!component) {\n            return {\n                ...styles,\n                gridColumn: `${cell.layout.colIndex + 2} / span ${cell.layout.colspan}`,\n                gridRow: `${cell.layout.rowIndex + 1} / span ${cell.layout.rowspan}`,\n            };\n        }\n        const isFullWidth = component?.content?.chunks[0]?.find((chunk: any) => chunk.id === 'use-full-width')?.content\n            ?.value;\n\n        if (!isFullWidth) {\n            return {\n                ...styles,\n                gridColumn: `${cell.layout.colIndex + 2} / span ${cell.layout.colspan}`,\n                gridRow: `${cell.layout.rowIndex + 1} / span ${cell.layout.rowspan}`,\n            };\n        }\n\n        return {\n            ...styles,\n            gridColumn: `1 / span ${totalColumns + 2}`,\n            gridRow: `auto / span ${cell.layout.rowspan}`,\n        };\n    };\n\n    return (\n        <div className=\"frntr-grid\">\n            <BaseGrid\n                grid={grid}\n                itemComponentMapping={itemMapping}\n                tileViewComponentMapping={tileMapping}\n                type={GridRenderingType.Div}\n                styleForCell={styleForCell}\n                style={{\n                    gridTemplateColumns: `minmax(15px, 1fr) repeat(${totalColumns}, minmax(0, ${colWidth}px)) minmax(15px, 1fr)`,\n                    gridAutoRows: 'minmax(300px, auto)',\n                }}\n                options={{\n                    background: {\n                        style: {\n                            objectFit: 'cover',\n                        },\n                        imageProps: {\n                            sizes: '(max-width: 500px) 500px, 100vw',\n                            loading: 'lazy',\n                        },\n                    },\n                    style: {\n                        position: 'relative',\n                        width: '100%',\n                        zIndex: 20,\n                        minHeight: '100%',\n                        display: 'flex',\n                        alignItems: 'stretch',\n                        justifyContent: 'stretch',\n                    },\n                }}\n            />\n        </div>\n    );\n};\n", "import { Splide, SplideSlide } from '@splidejs/react-splide';\nimport { TileViewComponentProps } from '../../../lib/grid-tile/types';\nimport { Image } from '@crystallize/reactjs-components/dist/image';\n\nexport const HeroSlider: React.FC<TileViewComponentProps> = ({ tile }) => {\n    const { content } = tile;\n\n    return (\n        <div className=\"w-full hero-slider\">\n            <Splide\n                options={{\n                    perPage: 1,\n                    autoplay: true,\n                    interval: 4000,\n                    pagination: true,\n                    arrows: false,\n                    gap: 0,\n                }}\n            >\n                {content.images &&\n                    content.images.map((image: any) => {\n                        return (\n                            <SplideSlide key={image.url} className=\"slide\">\n                                <Image\n                                    {...image}\n                                    loading=\"eager\"\n                                    sizes=\"(max-width: 500px) 300px, 700px\"\n                                    className=\"h-[300px] sm:h-[400px] lg:h-[700px] [&>picture>img]:w-full [&>picture>img]:h-full [&>picture>img]:object-cover\"\n                                />\n                            </SplideSlide>\n                        );\n                    })}\n            </Splide>\n        </div>\n    );\n};\n"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime", "import_video", "import_image", "import_jsx_dev_runtime", "Component", "component", "chunk", "_a", "_b", "import_reactjs_components", "import_jsx_dev_runtime", "_a", "import_jsx_dev_runtime", "intro", "media", "_a", "import_image", "import_jsx_dev_runtime", "import_reactjs_components", "import_jsx_dev_runtime", "import_image", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "import_reactjs_components", "import_image", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "itemMapping", "Grid", "_a", "component"]
}
