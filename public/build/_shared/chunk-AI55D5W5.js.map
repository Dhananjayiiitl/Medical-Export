{
  "version": 3,
  "sources": ["../../../src/ui/components/price.tsx"],
  "sourcesContent": ["import { CartItem } from '@crystallize/node-service-api-request-handlers';\nimport displayPriceFor, { DisplayPrice } from '~/use-cases/checkout/pricing';\nimport { Price as CrystallizePrice } from '../lib/pricing/pricing-component';\nimport { DataMapper } from '~/use-cases/mapper';\nimport { useAppContext } from '../app-context/provider';\nimport { ProductVariant } from '~/use-cases/contracts/ProductVariant';\n\nexport const DiscountedPrice: React.FC<{ price: DisplayPrice; size?: string }> = ({ price, size = 'medium' }) => {\n    const priceSize = {\n        small: {\n            default: 'text-md font-semibold',\n            previous: 'line-through font-semibold pt-1 text-xs',\n            discount: 'text-md font-semibold text-green2',\n            percentage: 'text-sm py-1 px-2 h-[26px] rounded-md bg-[#efefef] font-medium',\n        },\n        medium: {\n            default: 'text-2xl font-bold',\n            previous: 'line-through font-semibold pt-1 text-sm',\n            discount: 'text-2xl font-bold text-green2',\n            percentage: 'text-sm py-1 px-2 h-[26px] rounded-md bg-[#efefef] font-bold',\n        },\n    };\n    const { default: defaultPrice, discounted: discountPrice, percent: discountPercentage, currency } = price;\n\n    return (\n        <div>\n            {discountPrice && discountPrice < defaultPrice ? (\n                <div className=\"flex flex-wrap  flex-col\">\n                    <div className={priceSize[size as keyof typeof priceSize].previous}>\n                        <CrystallizePrice currencyCode={currency.code}>{defaultPrice}</CrystallizePrice>\n                    </div>\n                    <div className=\"flex gap-2 items-center \">\n                        <div className={priceSize[size as keyof typeof priceSize].discount}>\n                            <CrystallizePrice currencyCode={currency.code}>{discountPrice}</CrystallizePrice>\n                        </div>\n                        <div className={priceSize[size as keyof typeof priceSize].percentage}>\n                            -{discountPercentage}%\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <div className={priceSize[size as keyof typeof priceSize].default}>\n                    <CrystallizePrice currencyCode={currency.code}>{defaultPrice}</CrystallizePrice>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport const Price: React.FC<{ variant: ProductVariant; size?: string }> = ({ variant, size = 'medium' }) => {\n    const { state } = useAppContext();\n    const price = displayPriceFor(\n        variant,\n        {\n            default: 'default',\n            discounted: 'sales',\n        },\n        state.currency.code,\n    );\n    return <DiscountedPrice price={price} size={size} />;\n};\n\nexport const CartItemPrice: React.FC<{ item: CartItem; saving: any; size?: string }> = ({\n    item,\n    saving,\n    size = 'small',\n}) => {\n    const mapper = DataMapper();\n    const { state, _t } = useAppContext();\n    return (\n        <>\n            <Price variant={mapper.API.Object.APIProductVariantToProductVariant(item.variant)} size={size} />\n            <div>\n                {_t('total')}:{' '}\n                <CrystallizePrice currencyCode={state.currency.code}>{item.price.gross}</CrystallizePrice>\n                {saving && (\n                    <>\n                        <del className=\"text-red mx-2\">\n                            <CrystallizePrice currencyCode={state.currency.code}>\n                                {item.price.net + saving.amount}\n                            </CrystallizePrice>\n                        </del>\n                        <small>({saving.quantity} for free!)</small>\n                    </>\n                )}\n            </div>\n        </>\n    );\n};\n"],
  "mappings": "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",
  "names": ["Price"]
}
