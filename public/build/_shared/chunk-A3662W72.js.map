{
  "version": 3,
  "sources": ["../../../src/ui/pages/LandingPage.tsx"],
  "sourcesContent": ["import { HeadersFunction, json, LinksFunction, LoaderFunction, MetaFunction } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\n\nimport splideStyles from '@splidejs/splide/dist/css/themes/splide-default.min.css';\nimport { HttpCacheHeaderTaggerFromLoader, StoreFrontAwaretHttpCacheHeaderTagger } from '~/use-cases/http/cache';\nimport { getStoreFront } from '~/core/storefront.server';\nimport { CrystallizeAPI } from '~/use-cases/crystallize/read';\nimport { buildMetas } from '~/use-cases/MicrodataBuilder';\nimport { getContext } from '~/use-cases/http/utils';\nimport { Shop } from '~/use-cases/contracts/Shop';\nimport ShopPage from '~/ui/pages/Shop';\n\nexport const links: LinksFunction = () => {\n    return [{ rel: 'stylesheet', href: splideStyles }];\n};\n\nexport let meta: MetaFunction = ({ data }) => {\n    return buildMetas(data);\n};\n\nexport const headers: HeadersFunction = ({ loaderHeaders }) => {\n    return HttpCacheHeaderTaggerFromLoader(loaderHeaders).headers;\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n    const requestContext = getContext(request);\n    const path = '/shop';\n    const { shared, secret } = await getStoreFront(requestContext.host);\n    const api = CrystallizeAPI({\n        apiClient: secret.apiClient,\n        language: requestContext.language,\n        isPreview: requestContext.isPreview,\n    });\n    const shop = await api.fetchShop(path);\n\n    return json({ shop }, StoreFrontAwaretHttpCacheHeaderTagger('15s', '1w', [path], shared.config.tenantIdentifier));\n};\n\nexport default () => {\n    const { shop } = useLoaderData() as { shop: Shop };\n    console.log(shop)\n    return (\n    <div>hello</div>\n    );\n};\n"],
  "mappings": ";;;;;;;;;;;;AAKA,wBAA8B;AAqC1B;AAJJ,IAAO,sBAAQ,MAAM;AACjB,QAAM,EAAE,KAAK,IAAI,cAAc;AAC/B,UAAQ,IAAI,IAAI;AAChB,SACA,mDAAC,SAAI,qBAAL;AAAA;AAAA;AAAA;AAAA,SAAU;AAEd;",
  "names": []
}
